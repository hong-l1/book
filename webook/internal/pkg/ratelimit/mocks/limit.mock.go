// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/ratelimit/type.go
//
// Generated by this command:
//
//	mockgen --source=internal/pkg/ratelimit/type.go --package=limitmocks --destination=internal/pkg/ratelimit/mocks/limit.mock.go
//

// Package limitmocks is a generated GoMock package.
package limitmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimit is a mock of Limit interface.
type MockLimit struct {
	ctrl     *gomock.Controller
	recorder *MockLimitMockRecorder
	isgomock struct{}
}

// MockLimitMockRecorder is the mock recorder for MockLimit.
type MockLimitMockRecorder struct {
	mock *MockLimit
}

// NewMockLimit creates a new mock instance.
func NewMockLimit(ctrl *gomock.Controller) *MockLimit {
	mock := &MockLimit{ctrl: ctrl}
	mock.recorder = &MockLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimit) EXPECT() *MockLimitMockRecorder {
	return m.recorder
}

// Limited mocks base method.
func (m *MockLimit) Limited(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limited", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Limited indicates an expected call of Limited.
func (mr *MockLimitMockRecorder) Limited(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limited", reflect.TypeOf((*MockLimit)(nil).Limited), ctx, key)
}
