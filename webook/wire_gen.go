// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	article3 "github.com/hong-l1/project/webook/internal/events/article"
	"github.com/hong-l1/project/webook/internal/repository"
	article2 "github.com/hong-l1/project/webook/internal/repository/article"
	"github.com/hong-l1/project/webook/internal/repository/cache"
	"github.com/hong-l1/project/webook/internal/repository/dao"
	"github.com/hong-l1/project/webook/internal/repository/dao/article"
	"github.com/hong-l1/project/webook/internal/service"
	"github.com/hong-l1/project/webook/internal/web"
	"github.com/hong-l1/project/webook/internal/web/jwt"
	"github.com/hong-l1/project/webook/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *App {
	loggerv1 := ioc.InitLogger()
	v := ioc.InitMiddlewares(loggerv1)
	db := ioc.InitDb(loggerv1)
	userDao := dao.NewUserDao(db)
	cmdable := ioc.InitRedis()
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewRepository(userDao, userCache)
	userService := service.NewUserService(userRepository, loggerv1)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSmsService()
	codeService := service.NewCodeService(codeRepository, smsService)
	handle := jwt.NewRedisJWT(cmdable)
	userHandle := web.NewUserHandle(userService, codeService, handle, loggerv1)
	wechatService := ioc.InitOauth2WechatService()
	oAuth2WeChatHandle := web.NewOAuth2WeChatHandle(wechatService, userService, handle)
	articleDao := article.NewGORMArticleDao(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := article2.NewCacheArticle(articleDao, db, articleCache, loggerv1)
	client := ioc.Initkafka()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article3.NewKafkaProducer(syncProducer)
	articleService := service.NewServiceArticle(articleRepository, loggerv1, producer)
	interactiveDAO := article.NewGORMInteractiveDAO(db)
	interactiveRepository := article2.NewCachedInteractiveRepository(interactiveDAO, loggerv1)
	interactiveService := service.NewInteractiveServiceImpl(interactiveRepository)
	string2 := ProvideBizConfig()
	articleHandle := web.NewArticleHandle(loggerv1, articleService, interactiveService, string2)
	engine := ioc.InitGin(v, userHandle, oAuth2WeChatHandle, articleHandle)
	batchConusmer := article3.NewBatchConusmer(loggerv1, interactiveRepository, client)
	v2 := ioc.InitConsumers(batchConusmer)
	app := &App{
		Server:    engine,
		Consumers: v2,
	}
	return app
}

// wire.go:

func ProvideBizConfig() string {
	return "article"
}
